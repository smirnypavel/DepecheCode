{"version":3,"sources":["GridMasonry.js","index.js"],"names":["GridMasonry","constructor","opt","items","requiredOpt","checkOptions","init","findItems","then","bindStyles","resizeItems","listenEvent","map","key","Error","container","document","querySelector","containerClass","Promise","resolve","reject","querySelectorAll","itemClass","NodeList","length","style","display","gridRowGap","gridColumnGap","gridTemplateColumns","itemMinWith","itemMaxWith","gridAutoRows","forEach","item","gridAutoColumns","rowGap","parseInt","window","getComputedStyle","getPropertyValue","rowHeight","itemContent","itemContentClass","rowSpan","Math","ceil","getBoundingClientRect","height","gridRowEnd","event","addEventListener","e"],"mappings":";AAgGA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAhGA,IAAIA,EAAc,MAChBC,YAAYC,GACLA,KAAAA,IAAMA,EACNC,KAAAA,MAAQ,GACRC,KAAAA,YAAc,CACjB,iBACA,YACA,mBACA,aACA,gBACA,cACA,eAEGC,KAAAA,eAMPC,OACOH,KAAAA,MAAQ,GACRE,KAAAA,eACAE,KAAAA,YAAYC,KAAK,KACfC,KAAAA,aACAC,KAAAA,gBAEFC,KAAAA,cAMPN,eACOD,KAAAA,YAAYQ,IAAIC,IACf,IAAC,KAAKX,IAAIW,GAAM,MAAM,IAAIC,MAC5B,sBAAwBD,EAAM,kFASpCN,YAEM,GADCQ,KAAAA,UAAYC,SAASC,cAAc,KAAKf,IAAIgB,iBAC5C,KAAKH,UAAW,MAAM,IAAID,MAAM,yBAA2B,KAAKZ,IAAIgB,eAAiB,kBACnF,OAAA,IAAIC,QAAQ,CAACC,EAASC,KACtBlB,KAAAA,MAAQ,KAAKY,UAAUO,iBAAiB,KAAKpB,IAAIqB,WACtDH,EAAQ,KAAKjB,SAOjBM,aACO,KAAKN,OAAW,KAAKA,iBAAiBqB,UAAc,KAAKrB,MAAMsB,SAC/DV,KAAAA,UAAUW,MAAMC,QAAU,OAC1BZ,KAAAA,UAAUW,MAAME,WAAa,KAAK1B,IAAI0B,WACtCb,KAAAA,UAAUW,MAAMG,cAAgB,KAAK3B,IAAI2B,cACzCd,KAAAA,UAAUW,MAAMI,oBAAsB,4BAA8B,KAAK5B,IAAI6B,YAAc,KAAO,KAAK7B,IAAI8B,YAAc,KAGzHjB,KAAAA,UAAUW,MAAMO,aAAe,IAE/B9B,KAAAA,MAAM+B,QAAQC,IAEjBA,EAAKT,MAAMO,aAAe,EAC1BE,EAAKT,MAAMU,gBAAkB,KAOjC1B,cACM,KAAC,KAAKP,OAAW,KAAKA,iBAAiBqB,UAAc,KAAKrB,MAAMsB,QAAQ,OACxEY,IAAAA,EAAYC,SAASC,OAAOC,iBAAiB,KAAKzB,WAAW0B,iBAAiB,iBAC9EC,EAAYJ,SAASC,OAAOC,iBAAiB,KAAKzB,WAAW0B,iBAAiB,mBAC7EtC,KAAAA,MAAM+B,QAAQC,IACbQ,IAAAA,EAAcR,EAAKlB,cAAc,KAAKf,IAAI0C,kBAAmBC,EAAU,EACvE,IAACF,EAAa,MAAM,IAAI7B,MAAM,0DAA4D,KAAKZ,IAAI0C,iBAAmB,MAC1HC,EAAUC,KAAKC,MAAMJ,EAAYK,wBAAwBC,OAAOZ,IAASK,EAAUL,IAEnFF,EAAKT,MAAMwB,WAAa,QAAUL,IAOtClC,cACG,CAAA,OAAQ,UAAUC,IAAIuC,GAASZ,OAAOa,iBAAiBD,EAAOE,GAAK,KAAK3C,kBAG7E,QAAA,QAAA,EAAA6B,OAAOvC,YAAcA;;;;AC9FrB,aAFA,IAAA,EAAA,EAAA,QAAA,kBAEA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAaA,QAAA,oBAbAgB,SAASoC,iBAAiB,mBAAoBC,IAE5B,IAAIrD,EAAJ,QAAgB,CAC1BkB,eAAkB,gBAClBK,UAAkB,qBAClBqB,iBAAkB,gCAClBhB,WAAkB,MAClBC,cAAkB,MAClBE,YAAkB,QAClBC,YAAkB,QACjB1B","file":"src.7f7e81ac.js","sourceRoot":"../src","sourcesContent":["let GridMasonry = class GridMasonry{\n  constructor(opt) {\n    this.opt = opt;\n    this.items = [];\n    this.requiredOpt = [\n      'containerClass',\n      'itemClass',\n      'itemContentClass',\n      'gridRowGap',\n      'gridColumnGap',\n      'itemMinWith',\n      'itemMaxWith',\n    ];\n    this.checkOptions();\n  }\n\n  /**\n   * Запускает необходимые методы для работы\n  */\n  init() {\n    this.items = [];\n    this.checkOptions();\n    this.findItems().then(() => {\n      this.bindStyles();\n      this.resizeItems()\n    });;\n    this.listenEvent();\n  }\n\n  /**\n   * Проверяет переданы ли обязательные параметры\n  */\n  checkOptions() {\n    this.requiredOpt.map(key => {\n      if (!this.opt[key]) throw new Error(\n        \"Required property '\" + key + \"' is not defined. \" + \n        \"You should define that property before call 'init' method.\"\n      );\n    });\n  }\n\n  /**\n   * Находит все элементы внутри списка\n  */\n  findItems() {\n    this.container = document.querySelector(this.opt.containerClass);\n    if (!this.container) throw new Error(\"Container with class '\" + this.opt.containerClass + \"' is not find.\");\n    return new Promise((resolve, reject) => {\n      this.items = this.container.querySelectorAll(this.opt.itemClass);\n      resolve(this.items);\n    });\n  }\n\n  /**\n   * Добавляет к контейнеру и элементам grid стили\n  */\n  bindStyles() {\n    if (!this.items || !(this.items instanceof NodeList) || !this.items.length) return;\n    this.container.style.display = 'grid';\n    this.container.style.gridRowGap = this.opt.gridRowGap;\n    this.container.style.gridColumnGap = this.opt.gridColumnGap;\n    this.container.style.gridTemplateColumns = 'repeat(auto-fill, minmax(' + this.opt.itemMinWith + ', ' + this.opt.itemMaxWith + '))';\n    //this.container.style.gridTemplateRows = 'none';\n    //this.container.style.gridTemplateRows = 'repeat(auto-fill, minmax(0px, max-content))';\n    this.container.style.gridAutoRows = '0';\n\n    this.items.forEach(item => {\n      //item.style.gridAutoRows = 'repeat(auto-fill, minmax(1px, 1fr))';\n      item.style.gridAutoRows = 0;\n      item.style.gridAutoColumns = 0;\n    });\n  }\n\n  /**\n   * Изменяет размер каждого элемента, в зависимости от его наполнения\n  */\n  resizeItems() {\n    if (!this.items || !(this.items instanceof NodeList) || !this.items.length) return;\n    let rowGap    = parseInt(window.getComputedStyle(this.container).getPropertyValue('grid-row-gap')),\n        rowHeight = parseInt(window.getComputedStyle(this.container).getPropertyValue('grid-auto-rows'));\n    this.items.forEach(item => {\n      let itemContent = item.querySelector(this.opt.itemContentClass), rowSpan = 0;\n      if (!itemContent) throw new Error(\"All grid items must contents 'div' element with class '\" + this.opt.itemContentClass + \"'.\");\n      rowSpan = Math.ceil((itemContent.getBoundingClientRect().height+rowGap)/(rowHeight+rowGap));\n      //rowSpan = Math.ceil((itemContent.getBoundingClientRect().height)/(rowHeight));\n      item.style.gridRowEnd = 'span ' + rowSpan;\n    });\n  }\n\n  /**\n   * Слушает события изменения страницы и запускает ресайз повторно\n  */\n  listenEvent() {\n    ['load', 'resize'].map(event => window.addEventListener(event, e => this.resizeItems()));\n  }\n}\nwindow.GridMasonry = GridMasonry;\nexport {GridMasonry as default};","import GridMasonry from './GridMasonry';\n//Слушаем событие загрузки страницы\ndocument.addEventListener('DOMContentLoaded', e => {\n    //Создаем экземпляр класса с настройками и запускаем функцией init()\n    let Masonry = new GridMasonry({\n        containerClass:   '.grid-masonry',                 //Контейнер для элементов сетки\n        itemClass:        '.grid-masonry-item',            //Каждый элемент сетки\n        itemContentClass: '.grid-masonry-item__container', //Контейнер внутри каждого элемента стеки\n        gridRowGap:       '5px',  //Верхний и нижний отступ\n        gridColumnGap:    '5px',  //Правый и левый отступ\n        itemMinWith:      '140px', //Минимальная ширина одного элемента сетки\n        itemMaxWith:      '1fr'    //Максимальная ширина одного элемента сетки, для работы адаптива нужно значение в единицах изменения fr\n      }).init();\n});\n\nimport './sass/main.scss';\n\n"]}